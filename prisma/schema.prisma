// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
}

enum AcceptanceStatus{
  accepted
  pending
  declined
}

enum UserType {
  admin
  user
  child
}

enum Provider {
  facebook
  google
  apple
  native
}

enum Level {
  beginner
  intermediate
  advanced
}


model User {
  id                  Int                   @id @default(autoincrement())
  firstName           String?
  lastName            String?
  profileImage        String?
  password            String
  email               String?                @unique
  mobileNumber        String                @unique
  gender              Gender?
  birthday            DateTime?
  userType            UserType?
  isPhoneVerified     Boolean               @default(false)
  provider            Provider              @default(native)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  playerProfile       PlayerProfile?
  trainerProfile      TrainerProfile?
  childs              Child[]
  fields              FieldsBookedHours[]
  addedFields         Field[]
}

model PlayerProfile{
  id                    Int                   @id @default(autoincrement())

  level                 Level?

  regionId              Int?          
  region                Region?               @relation(fields: [regionId], references: [id])

  sports                PlayerProfileSports[]

  userId                Int                   @unique
  user                  User                  @relation(fields: [userId], references: [id],onDelete: Cascade)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PlayerProfileSports{
  playerProfile       PlayerProfile     @relation(fields: [playerProfileId], references: [id])
  playerProfileId     Int
  sport               Sport @relation(fields: [sportId], references: [id])
  sportId             Int

  @@id([playerProfileId, sportId])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model TrainerProfile{
  id                  Int         @id @default(autoincrement())

  level             Level       @default(beginner)


  sports                TrainerProfileSports[]

  userId              Int         @unique
  user                User        @relation(fields: [userId], references: [id],onDelete: Cascade)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model TrainerProfileSports{
  trainerProfile       TrainerProfile     @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId     Int

  sport               Sport @relation(fields: [sportId], references: [id])
  sportId             Int

  @@id([trainerProfileId, sportId])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Child {
  id                  Int                    @id @default(autoincrement())
  firstName           String
  lastName            String
  profileImage        String?
  password            String?
  email               String                 @unique
  mobileNumber        String                 @unique
  gender              Gender?
  birthday            DateTime
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  isPhoneVerified     Boolean                @default(false)

  childProfile       ChildProfile?

  userId              Int
  user                User                   @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model ChildProfile{
  id                    Int                   @id @default(autoincrement())

  level                 Level?

  regionId              Int?          
  region                Region?               @relation(fields: [regionId], references: [id])

  sports                ChildProfileSports[]

  childId                Int                   @unique
  child                  Child                  @relation(fields: [childId], references: [id],onDelete: Cascade)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ChildProfileSports{
  childProfile       ChildProfile     @relation(fields: [childProfileId], references: [id])
  childProfileId     Int
  sport               Sport @relation(fields: [sportId], references: [id])
  sportId             Int

  @@id([childProfileId, sportId])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Field{
  id                  Int                    @id @default(autoincrement())
  name                String
  description         String?
  cost                Int?
  rating              Int?
  slotDuration        Int?
  address             String?
  longitude           Decimal?
  latitude            Decimal?
  profileImage        String?
  acceptanceStatus    AcceptanceStatus        @default(pending)
  availableWeekDays   Json?

  availableDayHours   Json?        

  addedByUserId       Int?
  addedByUser         User?                @relation(fields: [addedByUserId], references: [id],onDelete: Cascade)
  
  sport               Sport? @relation(fields: [sportId], references: [id])
  sportId             Int?

  region               Region? @relation(fields: [regionId], references: [id])
  regionId             Int?

  users               FieldsBookedHours[]
  notAvailableDays    FieldNotAvailableDays[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model FieldNotAvailableDays{
  id                  Int                    @id @default(autoincrement())
  dayDate             DateTime

  field               Field @relation(fields: [fieldId], references: [id])
  fieldId             Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model FieldsBookedHours{
  id                  Int                    @id @default(autoincrement())

  fromDateTime                DateTime
  gmt                 Int                   @default(0)
  
  user               User @relation(fields: [userId], references: [id])
  userId             Int

  field               Field @relation(fields: [fieldId], references: [id])
  fieldId             Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Sport{
  id                  Int                   @id @default(autoincrement())

  enName              String
  arName              String

  playerProfiles      PlayerProfileSports[]
  trainerProfiles     TrainerProfileSports[]
  childProfiles       ChildProfileSports[]
  fields              Field[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Region{
  id                    Int                 @id @default(autoincrement())

  enName                String
  arName                String

  playerProfile         PlayerProfile[]
  childProfile         ChildProfile[]
  fields              Field[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}
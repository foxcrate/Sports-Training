// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
}

enum ScheduleType {
  work
  override
}

enum AcceptanceStatus {
  accepted
  pending
  declined
}

enum RateableType {
  trainerProfile
  playerProfile
  session
  field
  doctorClinic
}

enum UserType {
  admin
  user
  child
}

enum ProfileType {
  player
  trainer
}

enum Provider {
  facebook
  google
  apple
  native
}

enum Level {
  beginner
  intermediate
  advanced
}

enum SessionStatus {
  active
  notActive
}

enum SessionRequestType {
  new
  change
}

enum SessionRequestStatus {
  pending
  accepted
  rejected
  canceled
}

enum CanceledByEnum {
  player
  trainer
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String?
  lastName        String?
  profileImage    String?
  password        String?
  email           String?   @unique
  mobileNumber    String    @unique
  gender          Gender?
  birthday        DateTime?
  isPhoneVerified Boolean   @default(false)
  isActivated     Boolean   @default(true)

  userType  UserType? @default(user)
  fcm_token String?
  provider  Provider  @default(native)

  playerProfile         PlayerProfile?
  trainerProfile        TrainerProfile?
  fields                FieldsBookedHours[]
  doctorClinics         DoctorClinicsBookedHours[]
  trainerBookedSessions TrainerBookedSession[]
  addedFields           Field[]
  addedDoctorClinics    DoctorClinic[]
  parentsChilds         ParentsChilds[]            @relation("ParentsChilds")
  childsParents         ParentsChilds[]            @relation("ChildsParents")
  rates                 Rate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ParentsChilds {
  id Int @id @default(autoincrement())

  parent   User @relation("ParentsChilds", fields: [parentId], references: [id])
  parentId Int

  child   User @relation("ChildsParents", fields: [childId], references: [id])
  childId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([parentId, childId])
}

model OTP {
  id           Int      @id @default(autoincrement())
  mobileNumber String
  otp          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model PlayerProfile {
  id Int @id @default(autoincrement())

  level Level?

  regionId Int?
  region   Region? @relation(fields: [regionId], references: [id])

  sports PlayerProfileSports[]
  rates  Rate[]

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PlayerProfileSports {
  playerProfile   PlayerProfile @relation(fields: [playerProfileId], references: [id])
  playerProfileId Int
  sport           Sport         @relation(fields: [sportId], references: [id])
  sportId         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([playerProfileId, sportId])
}

model TrainerProfile {
  id Int @id @default(autoincrement())

  level Level? @default(beginner)

  ageGroup   AgeGroup? @relation(fields: [ageGroupId], references: [id])
  ageGroupId Int?

  sessionDescription String?

  cost Int? @default(200)

  hoursPriorToBooking Int? @default(24)

  rates Rate[]

  pictures Picture[]

  certificates Certificate[]

  sports TrainerProfileSports[]

  fields TrainerProfileFields[]

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  regionId Int?
  region   Region? @relation(fields: [regionId], references: [id])

  schedules Schedule[]

  notAvailableDays TrainerProfileNotAvailableDays[]

  trainerBookedSessions TrainerBookedSession[]

  defaultCancellationTime Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model AgeGroup {
  id Int @id @default(autoincrement())

  name String

  trainerProfiles TrainerProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Schedule {
  id Int @id @default(autoincrement())

  type ScheduleType @default(work)

  slots Slot[]

  TrainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId Int

  months SchedulesMonths[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Slot {
  id Int @id @default(autoincrement())

  name String?

  fromTime String
  toTime   String

  cost Int?

  weekDayNumber Int?
  weekDayName   String?

  Schedule   Schedule? @relation(fields: [scheduleId], references: [id],onDelete: SetNull)
  scheduleId Int?

  field   Field? @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId Int?

  trainerBookedSessions TrainerBookedSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Month {
  id Int @id @default(autoincrement())

  monthNumber Int?
  monthName   String?

  schedules SchedulesMonths[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model SchedulesMonths {
  id Int @id @default(autoincrement())

  schedule   Schedule @relation(fields: [scheduleId], references: [id],onDelete: Cascade)
  scheduleId Int

  month   Month @relation(fields: [monthId], references: [id])
  monthId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([scheduleId, monthId])
}

model TrainerProfileSports {
  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId Int

  sport   Sport @relation(fields: [sportId], references: [id])
  sportId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([trainerProfileId, sportId])
}

model TrainerProfileFields {
  id Int @id @default(autoincrement())

  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId Int

  field   Field @relation(fields: [fieldId], references: [id])
  fieldId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([trainerProfileId, fieldId])
}

model TrainerBookedSession {
  id Int @id @default(autoincrement())

  status SessionStatus @default(active)

  gmt Int @default(0)

  date DateTime @db.Date

  sessionRequest SessionRequest?

  rates Rate[]

  user   User @relation(fields: [userId], references: [id])
  userId Int

  trainerProfile   TrainerProfile @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId Int

  slot   Slot @relation(fields: [slotId], references: [id])
  slotId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([date, slotId])
}

model SessionRequest {
  id Int @id @default(autoincrement())

  trainerBookedSession   TrainerBookedSession @relation(fields: [trainerBookedSessionId], references: [id], onDelete: Cascade)
  trainerBookedSessionId Int                  @unique

  type       SessionRequestType   @default(new)
  status     SessionRequestStatus @default(pending)
  canceledBy CanceledByEnum?

  cancellationReasons   CancellationReasons? @relation(fields: [cancellationReasonsId], references: [id], onDelete: Restrict)
  cancellationReasonsId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TrainerProfileNotAvailableDays {
  id      Int      @id @default(autoincrement())
  dayDate DateTime

  trainerProfile TrainerProfile @relation(fields: [trainerProfileId], references: [id])

  trainerProfileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Field {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  cost        Int?

  slotDuration      Int?
  address           String?
  longitude         Decimal?
  latitude          Decimal?
  profileImage      String?
  acceptanceStatus  AcceptanceStatus @default(pending)
  availableWeekDays Json?

  availableDayHours Json?
  rates             Rate[]

  slots Slot[]

  addedByUserId Int?
  addedByUser   User? @relation(fields: [addedByUserId], references: [id], onDelete: SetNull)

  sport   Sport? @relation(fields: [sportId], references: [id])
  sportId Int?

  region   Region? @relation(fields: [regionId], references: [id])
  regionId Int?

  users            FieldsBookedHours[]
  notAvailableDays FieldNotAvailableDays[]
  trainerProfiles  TrainerProfileFields[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Rate {
  id Int @id @default(autoincrement())

  ratingNumber Int?

  feedback String?

  rateableType RateableType

  profileType ProfileType @default(player)

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  field   Field? @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId Int?

  doctorClinic   DoctorClinic? @relation(fields: [doctorClinicId], references: [id], onDelete: Cascade)
  doctorClinicId Int?

  trainerProfile   TrainerProfile? @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
  trainerProfileId Int?

  playerProfile   PlayerProfile? @relation(fields: [playerProfileId], references: [id], onDelete: Cascade)
  playerProfileId Int?

  trainerBookedSession   TrainerBookedSession? @relation(fields: [trainerBookedSessionId], references: [id], onDelete: Cascade)
  trainerBookedSessionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Picture {
  id Int @id @default(autoincrement())

  imageLink String

  doctorClinic   DoctorClinic? @relation(fields: [doctorClinicId], references: [id], onDelete: Cascade)
  doctorClinicId Int?

  trainerProfile   TrainerProfile? @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
  trainerProfileId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Certificate {
  id Int @id @default(autoincrement())

  name String

  imageLink String

  trainerProfile   TrainerProfile? @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
  trainerProfileId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DoctorClinic {
  id                Int              @id @default(autoincrement())
  name              String
  description       String?
  qualifications    String?
  cost              Int?
  slotDuration      Int?
  address           String?
  longitude         Decimal?
  latitude          Decimal?
  profileImage      String?
  acceptanceStatus  AcceptanceStatus @default(pending)
  availableWeekDays Json?

  availableDayHours Json?

  rates Rate[]

  pictures Picture[]

  addedByUserId Int?
  addedByUser   User? @relation(fields: [addedByUserId], references: [id], onDelete: Cascade)

  region   Region? @relation(fields: [regionId], references: [id])
  regionId Int?

  doctorClinicSpecialization   DoctorClinicSpecialization? @relation(fields: [doctorClinicSpecializationId], references: [id])
  doctorClinicSpecializationId Int?

  users            DoctorClinicsBookedHours[]
  notAvailableDays DoctorClinicNotAvailableDays[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DoctorClinicSpecialization {
  id Int @id @default(autoincrement())

  name String

  doctorClinc DoctorClinic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model FieldNotAvailableDays {
  id      Int      @id @default(autoincrement())
  dayDate DateTime

  field   Field @relation(fields: [fieldId], references: [id])
  fieldId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DoctorClinicNotAvailableDays {
  id      Int      @id @default(autoincrement())
  dayDate DateTime

  doctorClinic   DoctorClinic @relation(fields: [doctorClinicId], references: [id])
  doctorClinicId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model FieldsBookedHours {
  id Int @id @default(autoincrement())

  fromDateTime DateTime
  gmt          Int      @default(0)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  field   Field @relation(fields: [fieldId], references: [id])
  fieldId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DoctorClinicsBookedHours {
  id Int @id @default(autoincrement())

  fromDateTime DateTime
  gmt          Int      @default(0)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  doctorClinic   DoctorClinic @relation(fields: [doctorClinicId], references: [id])
  doctorClinicId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Sport {
  id Int @id @default(autoincrement())

  name String?

  playerProfiles  PlayerProfileSports[]
  trainerProfiles TrainerProfileSports[]
  fields          Field[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Region {
  id Int @id @default(autoincrement())

  name String?

  playerProfile  PlayerProfile[]
  trainerProfile TrainerProfile[]
  fields         Field[]
  doctorClinc    DoctorClinic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// model Internationalization{
//   id                    Int                 @id @default(autoincrement())

//   tableName             String
//   rowName               String
//   en                    String
//   ar                    String

//   createdAt             DateTime              @default(now())
// }

model CancellationReasons {
  id             Int              @id @default(autoincrement())
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  SessionRequest SessionRequest[]
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  female
  male
}

enum AcceptanceStatus{
  accepted
  pending
  declined
}

enum RateableType {
  trainer
  field
  doctorClinic
}

enum UserType {
  admin
  user
  child
}

enum Provider {
  facebook
  google
  apple
  native
}

enum Level {
  beginner
  intermediate
  advanced
}

enum AgeGroup {
  kids
  young_adults
  adults
}


model User {
  id                  Int                   @id @default(autoincrement())
  firstName           String?
  lastName            String?
  profileImage        String?
  fcm_token           String?
  password            String?
  email               String?                @unique
  mobileNumber        String                @unique
  gender              Gender?
  birthday            DateTime?
  userType            UserType?
  isPhoneVerified     Boolean               @default(false)
  provider            Provider              @default(native)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  
  playerProfile       PlayerProfile?
  trainerProfile      TrainerProfile?
  childs              Child[]
  fields              FieldsBookedHours[]
  doctorClinics       DoctorClinicsBookedHours[]
  addedFields         Field[]
  addedDoctorClinics  DoctorClinic[]
  rates               Rate[]
}

model OTP{
  id                    Int                   @id @default(autoincrement())
  mobileNumber          String
  otp                   String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PlayerProfile{
  id                    Int                   @id @default(autoincrement())

  level                 Level?

  regionId              Int?          
  region                Region?               @relation(fields: [regionId], references: [id])

  sports                PlayerProfileSports[]

  userId                Int                   @unique
  user                  User                  @relation(fields: [userId], references: [id],onDelete: Cascade)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model PlayerProfileSports{
  playerProfile       PlayerProfile     @relation(fields: [playerProfileId], references: [id])
  playerProfileId     Int
  sport               Sport @relation(fields: [sportId], references: [id])
  sportId             Int

  @@id([playerProfileId, sportId])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model TrainerProfile{
  id                  Int         @id @default(autoincrement())

  level               Level?       @default(beginner)

  ageGroup            AgeGroup?       @default(young_adults)

  sessionDescription  String?


  sports              TrainerProfileSports[]

  fields              TrainerProfileFields[]

  userId              Int         @unique
  user                User        @relation(fields: [userId], references: [id],onDelete: Cascade)

  regionId            Int?          
  region              Region?               @relation(fields: [regionId], references: [id])

  schedules           Schedule[]

  createdAt           DateTime              @default(now())
}

model TrainerProfileSports{
  trainerProfile       TrainerProfile     @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId     Int

  sport               Sport @relation(fields: [sportId], references: [id])
  sportId             Int

  @@id([trainerProfileId, sportId])

  createdAt           DateTime              @default(now())
}

model TrainerProfileFields{
  id                  Int                    @id @default(autoincrement())

  trainerProfile       TrainerProfile     @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId     Int

  field               Field @relation(fields: [fieldId], references: [id])
  fieldId             Int

  @@unique([trainerProfileId, fieldId])

  createdAt           DateTime              @default(now())
}

model Schedule{
  id                  Int                    @id @default(autoincrement())

  slots               Slot[]

  TrainerProfile      TrainerProfile                   @relation(fields: [trainerProfileId], references: [id])
  trainerProfileId    Int

  months             SchedulesMonths[]

  createdAt           DateTime              @default(now())
  
}

model Slot{
  id                  Int                    @id @default(autoincrement())

  name                String?

  fromTime                String
  toTime                  String

  cost                Int?

  weekDayNumber       Int?
  weekDayName         String?

  Schedule            Schedule                   @relation(fields: [scheduleId], references: [id])
  scheduleId          Int

  field                 Field? @relation(fields: [fieldId], references: [id],onDelete: Cascade)
  fieldId               Int?  

  createdAt           DateTime              @default(now())
  
}

model Month{
  id                  Int                    @id @default(autoincrement())
  
  monthNumber         Int?
  monthName           String?

  schedules             SchedulesMonths[]

  createdAt           DateTime              @default(now())
}

model SchedulesMonths{
  id                  Int      @id @default(autoincrement())

  schedule             Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId           Int

  month              Month   @relation(fields: [monthId], references: [id])
  monthId            Int
  @@unique([scheduleId, monthId])

  createdAt           DateTime              @default(now())
}

model Child {
  id                  Int                    @id @default(autoincrement())
  firstName           String
  lastName            String
  profileImage        String?
  password            String?
  email               String                 @unique
  mobileNumber        String                 @unique
  gender              Gender?
  birthday            DateTime
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  isPhoneVerified     Boolean                @default(false)

  childProfile       ChildProfile?

  userId              Int
  user                User                   @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model ChildProfile{
  id                    Int                   @id @default(autoincrement())

  level                 Level?

  regionId              Int?          
  region                Region?               @relation(fields: [regionId], references: [id])

  sports                ChildProfileSports[]

  childId                Int                   @unique
  child                  Child                  @relation(fields: [childId], references: [id],onDelete: Cascade)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ChildProfileSports{
  childProfile       ChildProfile     @relation(fields: [childProfileId], references: [id])
  childProfileId     Int
  sport               Sport @relation(fields: [sportId], references: [id])
  sportId             Int

  @@id([childProfileId, sportId])

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Field{
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String?
  cost                Int?

  slotDuration        Int?
  address             String?
  longitude           Decimal?
  latitude            Decimal?
  profileImage        String?
  acceptanceStatus    AcceptanceStatus      @default(pending)
  availableWeekDays   Json?

  availableDayHours   Json?      
  rates               Rate[]

  slots               Slot[]

  addedByUserId       Int?
  addedByUser         User?                 @relation(fields: [addedByUserId], references: [id],onDelete: Cascade)
  
  sport               Sport?                @relation(fields: [sportId], references: [id])
  sportId             Int?

  region              Region?               @relation(fields: [regionId], references: [id])
  regionId            Int?

  users               FieldsBookedHours[]
  notAvailableDays    FieldNotAvailableDays[]
  trainerProfiles     TrainerProfileFields[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}


model Rate{
  id                    Int                 @id @default(autoincrement())

  ratingNumber          Int?

  feedback              String?

  rateableType          RateableType

  user                  User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId                Int  
  
  field                 Field? @relation(fields: [fieldId], references: [id],onDelete: Cascade)
  fieldId               Int?  

  doctorClinic          DoctorClinic? @relation(fields: [doctorClinicId], references: [id], onDelete: Cascade)
  doctorClinicId        Int?

  createdAt           DateTime              @default(now())
}

model DoctorClinic{
  id                  Int                    @id @default(autoincrement())
  name                String
  description         String?
  cost                Int?
  slotDuration        Int?
  address             String?
  longitude           Decimal?
  latitude            Decimal?
  profileImage        String?
  acceptanceStatus    AcceptanceStatus        @default(pending)
  availableWeekDays   Json?

  availableDayHours   Json?   

  rates        Rate[]

  addedByUserId             Int?
  addedByUser               User?                @relation(fields: [addedByUserId], references: [id],onDelete: Cascade)

  region                    Region? @relation(fields: [regionId], references: [id])
  regionId                  Int?

  doctorClinicSpecialization      DoctorClinicSpecialization? @relation(fields: [doctorClinicSpecializationId], references: [id])
  doctorClinicSpecializationId    Int?

  users               DoctorClinicsBookedHours[]
  notAvailableDays    DoctorClinicNotAvailableDays[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DoctorClinicSpecialization{
  id                    Int                 @id @default(autoincrement())

  name                String

  doctorClinc           DoctorClinic[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model FieldNotAvailableDays{
  id                  Int                    @id @default(autoincrement())
  dayDate             DateTime

  field               Field @relation(fields: [fieldId], references: [id])
  fieldId             Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DoctorClinicNotAvailableDays{
  id                  Int                    @id @default(autoincrement())
  dayDate             DateTime

  doctorClinic        DoctorClinic @relation(fields: [doctorClinicId], references: [id])
  doctorClinicId      Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model FieldsBookedHours{
  id                  Int                    @id @default(autoincrement())

  fromDateTime        DateTime
  gmt                 Int                   @default(0)
  
  user                User @relation(fields: [userId], references: [id])
  userId              Int

  field               Field @relation(fields: [fieldId], references: [id])
  fieldId             Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model DoctorClinicsBookedHours{
  id                  Int                    @id @default(autoincrement())

  fromDateTime                DateTime
  gmt                 Int                   @default(0)
  
  user                User @relation(fields: [userId], references: [id])
  userId              Int

  doctorClinic        DoctorClinic @relation(fields: [doctorClinicId], references: [id])
  doctorClinicId      Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Sport{
  id                  Int                   @id @default(autoincrement())

  name                String?

  playerProfiles      PlayerProfileSports[]
  trainerProfiles     TrainerProfileSports[]
  childProfiles       ChildProfileSports[]
  fields              Field[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Region{
  id                    Int                 @id @default(autoincrement())
  
  name                  String?

  playerProfile         PlayerProfile[]
  trainerProfile        TrainerProfile[]
  childProfile          ChildProfile[]
  fields                Field[]
  doctorClinc           DoctorClinic[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

// model Internationalization{
//   id                    Int                 @id @default(autoincrement())

//   tableName             String
//   rowName               String
//   en                    String
//   ar                    String

//   createdAt             DateTime              @default(now())
//   updatedAt             DateTime              @updatedAt
// }